type Actor {
  _id: ID!
  id: String
  name: String
}
type Genre {
  _id: ID!
  id: String
  name: String!
}
type Media {
  _id: ID!
  id: String
  link: String
  quality: String
  status: Boolean
  subtitleEng: Boolean
  subtitleSpa: Boolean
  audioEng: Boolean
  audioSpa: Boolean
}
type Movie {
  _id: ID!
  id: String
  title: String!
  year: Int!
  rating: Float
  synopsis: String
  synopsisEng: String
  covertImage: String
  fullImage: String
  mediaContent: String
  actors: [String]
  genres: [String]
  categories: [String]
  hasOscar: Boolean
  isPremiere: Boolean
  released: String
  rated: String
  imdbId: String
  trailer: String
  dateUpdated: String
  dateCreated: String
  view: Int
  position: Int
  mailOrigin: String
}

input ActorInput {
  name: String
}

input GenreInput {
  name: String!
}

input MediaInput {
  link: String
  quality: String
  status: Boolean
  subtitleEng: Boolean
  subtitleSpa: Boolean
  audioEng: Boolean
  audioSpa: Boolean
}

input MovieInput {
  id: String
  title: String
  year: Int
  rating: Float
  synopsis: String
  synopsisEng: String
  covertImage: String
  fullImage: String
  mediaContent: String
  actors: [String]
  genres: [String]
  categories: [String]
  hasOscar: Boolean
  isPremiere: Boolean
  released: String
  rated: String
  imdbId: String
  trailer: String
  dateUpdated: String
  dateCreated: String
  view: Int
  position: Int
  mailOrigin: String
}

input MovieOrderByInput {
  title: Int
  released: Int
  rating: Int
  dateUpdated: Int
  genres: Int
  view: Int
}
input DateRangeInput {
  from: String
  to: String
}
input RatingFilterInput {
  gte: Int
  lt: Int
  eq: Int
}
input MovieFilterInput {
  search: String
  title: String
  released: DateRangeInput
  rating: Int
  dateUpdated: DateRangeInput
  genres: [String]
}
input Pagination {
  currentPage: Int!
  pageSize: Int!
}

type Query {
  # searchAll(search: String, orderBy: MovieOrderByInput, limit: Int, skip: Int): [Movie]
  allMovies(filter: MovieFilterInput, orderBy: MovieOrderByInput, limit: Int, skip: Int): [Movie]
  getLastMovies: [Movie]
  getMovie(_id: String): Movie
  getAllGenres: [Genre]
}

type Mutation {
  # createActor(input: ActorInput): Actor
  # createGenre(input: GenreInput) : Genre
  # createMedia(input: MediaInput) : Media
  createMovie(input: MovieInput) : Movie
  
  # createShortMovie(input: ShortMovieInput) : ShortMovie

  deleteMovie(input: MovieInput) : Movie
}
